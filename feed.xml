<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://spongebob53.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://spongebob53.github.io/" rel="alternate" type="text/html" /><updated>2021-12-10T08:10:34+09:00</updated><id>https://spongebob53.github.io/feed.xml</id><title type="html">Coding Diary</title><subtitle>개발 기록</subtitle><entry><title type="html">Java - Access Modifier / Extends</title><link href="https://spongebob53.github.io/lecture-access_modifier_extends" rel="alternate" type="text/html" title="Java - Access Modifier / Extends" /><published>2021-12-09T18:00:00+09:00</published><updated>2021-12-09T18:00:00+09:00</updated><id>https://spongebob53.github.io/lecture-access_modifier_extends</id><content type="html" xml:base="https://spongebob53.github.io/lecture-access_modifier_extends">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;JAVA(자바), Python(파이썬) 기반의&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;AI 활용 응용 소프트웨어 개발자 양성 과정&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;2021.11.10. ~ 2022.05.18.&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  Lecture는 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-intro_var&quot;&gt;Intro/var&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-scanner&quot;&gt;Scanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop_practice&quot;&gt;Loop_practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-exam_prime&quot;&gt;Exam_prime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array1&quot;&gt;Array1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array2&quot;&gt;Array2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array3&quot;&gt;Array3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-class&quot;&gt;Class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-return&quot;&gt;Return&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-static_constructor&quot;&gt;Static/Constructor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-package&quot;&gt;Package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-overloading_string&quot;&gt;Overloading/String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./lecture-access_modifier_extends&quot;&gt;Access modifier/Extends&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;19일차-수업&quot;&gt;19일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;복습&quot;&gt;========복습========&lt;/h3&gt;

&lt;h3 id=&quot;작명-규칙&quot;&gt;작명 규칙&lt;/h3&gt;

&lt;p&gt;camel : 단어와 단어 사이를 대문자로 구분&lt;/p&gt;

&lt;p&gt;snake : 단어와 단어 사이를 _ 로 구분&lt;/p&gt;

&lt;p&gt;class는 대문자로 시작&lt;/p&gt;

&lt;p&gt;variable, method 소문자로 시작 : 다른 사람들이 보고 파악할 수 있도록 작성해 주는 것이 좋음&lt;/p&gt;

&lt;p&gt;프로젝트 팀원이나 회사 규칙에 맞춰서 작성하면 됨&lt;/p&gt;

&lt;h3 id=&quot;overloading&quot;&gt;overloading&lt;/h3&gt;

&lt;p&gt;method, parameter 조건 충족하면 가능&lt;/p&gt;

&lt;p&gt;method의 이름과, parameter(순서 개수 자료형)이 동일해야하고 리턴값과는 무관&lt;/p&gt;

&lt;h3 id=&quot;package&quot;&gt;package&lt;/h3&gt;

&lt;p&gt;클래스를 묶은 집합, 폴더&lt;/p&gt;

&lt;p&gt;기능적으로 비슷하거나 사용이 용이하도록 파일을 관리, 이름 충돌문제 해결&lt;/p&gt;

&lt;p&gt;구분자는 dot(.)&lt;/p&gt;

&lt;p&gt;import&lt;/p&gt;

&lt;p&gt;import를 통해서 패키지 안에 있는 클래스를 현재 클래스에서 사용할 수 있도록 권한 부여&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;import 패키지명.클래스명&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;import 시 이름이 겹치면 클래스명에 직접적으로 패키지를 작성합니다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-끝-&quot;&gt;======== 끝 ========&lt;/h3&gt;

&lt;h2 id=&quot;19일차-수업-1&quot;&gt;19일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;정보은닉&quot;&gt;정보은닉&lt;/h3&gt;

&lt;p&gt;사용자가 굳이 알 필요없는 정보는 숨기고, 최소한의 정보로만 프로그래밍을 할 수 있어야 한다&lt;/p&gt;

&lt;h3 id=&quot;접근제어자--access-modifier&quot;&gt;접근제어자 : access modifier&lt;/h3&gt;

&lt;p&gt;맨 앞에 선언, 1개만 가능하고 생략 시엔 default로&lt;/p&gt;

&lt;p&gt;private(class) &amp;lt; protected(subclass) &amp;lt; default(package) &amp;lt; public(all)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;private&lt;/p&gt;

    &lt;p&gt;같은 클래스 안에서 사용가능&lt;/p&gt;

    &lt;p&gt;private를 작성한 클래스 내에서 해결을 해야함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;default&lt;/p&gt;

    &lt;p&gt;기본값&lt;/p&gt;

    &lt;p&gt;같은 패키지 안에서 사용가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public&lt;/p&gt;

    &lt;p&gt;클래스의 접근제어자 중에 최대 허용 범위를 가진 접근제어자&lt;/p&gt;

    &lt;p&gt;default 와 헷갈리지 않게 주의&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;private-변수-접근하기&quot;&gt;private 변수 접근하기&lt;/h3&gt;

&lt;p&gt;외부에서 입력해주고 출력해주는 메소드를 만들어야함&lt;/p&gt;

&lt;p&gt;마우스 우클릭 » Source » generate Getters and Setters 하면 편하게 만들 수 있음&lt;/p&gt;

&lt;p&gt;명명규칙 : get변수명()&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//외부로 반환하는 메소드&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAbc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//	내부로 저장하는 메소드&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAbc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;상속&quot;&gt;상속&lt;/h3&gt;

&lt;p&gt;매우 중요!! 313p 참조 객체지향 프로그래밍 필수&lt;/p&gt;

&lt;p&gt;새로운 클래스로 재정의&lt;/p&gt;

&lt;p&gt;상속을 이용하면 기존의 정의된 클래스(부모)의 모든 필드와 메소드를 물려받아&lt;/p&gt;

&lt;p&gt;새로운 클래스(자식)의 재정의 및 추가 생성 가능&lt;/p&gt;

&lt;p&gt;기존의 정의된 클래스 : 부모 , 상위, 기초 클래스&lt;/p&gt;

&lt;p&gt;상속받은 클래스 : 자식, 하위, 파생 클래스&lt;/p&gt;

&lt;h3 id=&quot;extends&quot;&gt;extends&lt;/h3&gt;

&lt;p&gt;상속을 진행하는 키워드&lt;/p&gt;

&lt;p&gt;class 자식 클래스명 extends 부모 클래스명 {—}&lt;/p&gt;

&lt;p&gt;접근제어자가 private, default 로 선언된 변수는 사용 불가능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;public 혹은 protected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자식 클래스의 인스턴스가 생성될 때&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;상위클래스의 생성자가 먼저 호출되고, 하위 클래스의 생성자를 호출한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필드와 파라미터가 중복될 때 this를 사용했던 것처럼, 상위클래스의 필드는 super.로 구분한다&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;static과 별개로 생각해서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;classarray&quot;&gt;classArray&lt;/h3&gt;

&lt;p&gt;클래스를 이용한 배열&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클래스의 형태(인스턴스)를 5칸가진배열&lt;/p&gt;

&lt;p&gt;Car[0] : 배열 한 칸에 들어있는 Car 인스턴스&lt;/p&gt;</content><author><name>Spongebob53</name></author><category term="lecture" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 JAVA(자바), Python(파이썬) 기반의 AI 활용 응용 소프트웨어 개발자 양성 과정 2021.11.10. ~ 2022.05.18.</summary></entry><entry><title type="html">W3schools - Modifier</title><link href="https://spongebob53.github.io/w3schools-modifier" rel="alternate" type="text/html" title="W3schools - Modifier" /><published>2021-12-09T18:00:00+09:00</published><updated>2021-12-09T18:00:00+09:00</updated><id>https://spongebob53.github.io/w3schools-modifier</id><content type="html" xml:base="https://spongebob53.github.io/w3schools-modifier">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;
  &lt;h3&gt;&lt;a href=&quot;https://www.w3schools.com/&quot;&gt;W3schools&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;div&gt;Lecture에서 배웠던 내용을 복습하며 작성했습니다&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  W3schools은 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-intro_setup&quot;&gt;Intro/Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-variable&quot;&gt;Variable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-datatype&quot;&gt;Data Type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-string_math&quot;&gt;String/Math&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-array&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-class_static&quot;&gt;Class/Static&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-constructor&quot;&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;modifier&quot;&gt;Modifier&lt;/h3&gt;

&lt;p&gt;Public modifier keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods, and constructors&lt;/p&gt;

&lt;p&gt;Divide modifiers into two groups&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Access modifiers&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;controls the access level&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Non-access modifiers&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;don’t control access level, but provides other functionality&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;access-modifier&quot;&gt;Access modifier&lt;/h3&gt;

&lt;p&gt;For class&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;public : accessible by any other class&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;default 　: accessible by classes in the same package&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;if you don’t specify a modifier&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For attribute, method, constructor&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;public : accessible for all classes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;private : only accessible within the declared class&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;default : only accessible in the same package&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;protected : the code is a accessible in the same package and subclasses&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;non-access-modifier&quot;&gt;Non-access modifier&lt;/h3&gt;

&lt;p&gt;For class&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;final : the class can’t be inherited by other classes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;abstract : the class can’t be used to create objects&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;to access an abstract class, it must be inherited from another class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For attribute, method&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;final : Can’t be overridden/modified&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;static : belongs to the class, rather than an object&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;abstract : can only be used in an abstract class, and can only be used on methods&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;the method doesn’t have a body, the body is provided by the subclass&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;transient : be skipped when serializing the object containing them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;synchronized : methods can only be accessed by one thread at a time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;volatile : the value of an attribute is not cached thread-locally, and is always read from the “main memory”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Spongebob53</name></author><category term="w3schools" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 W3schools Lecture에서 배웠던 내용을 복습하며 작성했습니다</summary></entry><entry><title type="html">Java - Overloading / String</title><link href="https://spongebob53.github.io/lecture-overloading_String" rel="alternate" type="text/html" title="Java - Overloading / String" /><published>2021-12-08T18:00:00+09:00</published><updated>2021-12-08T18:00:00+09:00</updated><id>https://spongebob53.github.io/lecture-overloading_String</id><content type="html" xml:base="https://spongebob53.github.io/lecture-overloading_String">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;JAVA(자바), Python(파이썬) 기반의&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;AI 활용 응용 소프트웨어 개발자 양성 과정&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;2021.11.10. ~ 2022.05.18.&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  Lecture는 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-intro_var&quot;&gt;Intro/var&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-scanner&quot;&gt;Scanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop_practice&quot;&gt;Loop_practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-exam_prime&quot;&gt;Exam_prime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array1&quot;&gt;Array1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array2&quot;&gt;Array2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array3&quot;&gt;Array3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-class&quot;&gt;Class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-return&quot;&gt;Return&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-static_constructor&quot;&gt;Static/Constructor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-package&quot;&gt;Package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-overloading_string&quot;&gt;Overloading/String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./lecture-access_modifier_extends&quot;&gt;Access modifier/Extends&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;18일차-수업&quot;&gt;18일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;복습&quot;&gt;========복습========&lt;/h3&gt;

&lt;h3 id=&quot;생성자&quot;&gt;생성자&lt;/h3&gt;

&lt;p&gt;인스턴스를 만들 때 마지막 단계&lt;/p&gt;

&lt;p&gt;클래스에 정의한 변수 생성되고 그 다음에 생성자 메소드 호출&lt;/p&gt;

&lt;p&gt;호출한 메소드 내의 내용을 하나씩 실행하면서 생성자 메소드를 마무리&lt;/p&gt;

&lt;p&gt;다른 메소드들이랑 다르게 void(반환자료형이 없고, 리턴도 없음)&lt;/p&gt;

&lt;p&gt;생성자가 하나도 없다면 기본 생성자를 시스템이서 만들어주고 생성자가 있다면 기본 생성자를 만들어 주지 않는다&lt;/p&gt;

&lt;p&gt;우리가 정의한 생성자의 모양대로만 new 인스턴스를 할 수 있다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;만약에 생성자에 파라미터가 2개 있는 생성자를 만들었다&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;이 다음 부터는 클래스를 인스턴스화 할 때 무조건 인자를 2개 넣어야한다!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;인자를 넣지 않는 인스턴스는 더 이상 만들지 못함&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;과정&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인스턴스 만들기(new를 한다) » 생성자 메소드가 1회 호출된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;모양&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;public 클래스명(){—}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;overriding&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성자는 여러 개 만들 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;this&quot;&gt;this&lt;/h3&gt;

&lt;p&gt;메소드 안 지역변수는 메소드가 끝나고 저장되지 않기 때문에 남기고 싶다면 전역변수에 대입을 해줘야함&lt;/p&gt;

&lt;p&gt;지역변수와 전역변수의 이름이 겹치는 상황이 있을 때 this를 이용하여 전역변수와 지역변수를 구분&lt;/p&gt;

&lt;h3 id=&quot;-끝-&quot;&gt;======== 끝 ========&lt;/h3&gt;

&lt;h2 id=&quot;18일차-수업-1&quot;&gt;18일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;이름-규칙&quot;&gt;이름 규칙&lt;/h3&gt;

&lt;p&gt;변수 : 소문자&lt;/p&gt;

&lt;p&gt;메소드 : 소문자&lt;/p&gt;

&lt;p&gt;클래스 : 첫글자 대문자&lt;/p&gt;

&lt;p&gt;가독성을 높이기 위한 방법&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// camel&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//snake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;정보-은닉&quot;&gt;정보 은닉&lt;/h3&gt;

&lt;p&gt;변수의 메소드를 아무나 볼 수 있는 것이 아니라 사용을 하려는 사람에게만 권한을 주는 것&lt;/p&gt;

&lt;p&gt;패키지, 클래스, 메소드 등&lt;/p&gt;

&lt;h3 id=&quot;접근제어자&quot;&gt;접근제어자&lt;/h3&gt;

&lt;p&gt;public, protected, private, default&lt;/p&gt;

&lt;h3 id=&quot;overloading&quot;&gt;overloading&lt;/h3&gt;

&lt;p&gt;메소드를 중복해서 정의하는 것&lt;/p&gt;

&lt;p&gt;메소드 시그니처&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메소드를 정의할 때 쓰는 파라미터 요소(리스트)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메소드 시그니처가 다르면 같은 이름을 가질 수 있음, 반환타입과는 무관&lt;/p&gt;

&lt;h3 id=&quot;timer-깔끔하게-구현해보기&quot;&gt;timer 깔끔하게 구현해보기&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Timer22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;째깍째깍 현재시간은 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;시 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;분&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;초 입니다!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid Value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid Value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;윤년&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid Value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;년은 윤년입니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;년은 윤년이 아닙니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;string&quot;&gt;String&lt;/h3&gt;

&lt;p&gt;문자열을 담는 자료형&lt;/p&gt;

&lt;p&gt;package java.lang 에 있는 클래스&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//파라미터의 정의가 없는 생성자&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//파라미터의 정의가 있는 생성자&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;안녕&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//자바에서 보편적으로 사용하는 코드이기 때문에 예외적으로 문법을 무시한 케이스&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//배열이라 길이를 구할 수 있음&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//특정 인덱스 번호에 있는 문자를 반환&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//특정 문자열 비교하는 문장 차이나는 개수만큼 출력, 대소문자도 구분&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//문자열을 더하는 메소드, 원본 데이터에 영향 없음&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//문자열에서 문자 검색, 없을 경우 -1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 소문자 변환&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 대문자 변환&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//문자열 자르기 (인자 하나 begin 인자 둘 begin end)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//문자열 분리하기, 인자(분리하는 기준)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//문자열 중에 문자를 str1 =&amp;gt; str2 바꿔버리는 것&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//앞 뒤로 공백을 제거&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//모든 자료형을 문자열로 바꿔줌&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Spongebob53</name></author><category term="lecture" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 JAVA(자바), Python(파이썬) 기반의 AI 활용 응용 소프트웨어 개발자 양성 과정 2021.11.10. ~ 2022.05.18.</summary></entry><entry><title type="html">Java - Package</title><link href="https://spongebob53.github.io/lecture-package" rel="alternate" type="text/html" title="Java - Package" /><published>2021-12-06T18:00:00+09:00</published><updated>2021-12-06T18:00:00+09:00</updated><id>https://spongebob53.github.io/lecture-package</id><content type="html" xml:base="https://spongebob53.github.io/lecture-package">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;JAVA(자바), Python(파이썬) 기반의&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;AI 활용 응용 소프트웨어 개발자 양성 과정&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;2021.11.10. ~ 2022.05.18.&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  Lecture는 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-intro_var&quot;&gt;Intro/var&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-scanner&quot;&gt;Scanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop_practice&quot;&gt;Loop_practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-exam_prime&quot;&gt;Exam_prime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array1&quot;&gt;Array1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array2&quot;&gt;Array2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array3&quot;&gt;Array3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-class&quot;&gt;Class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-return&quot;&gt;Return&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-static_constructor&quot;&gt;Static/Constructor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-package&quot;&gt;Package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-overloading_string&quot;&gt;Overloading/String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./lecture-access_modifier_extends&quot;&gt;Access modifier/Extends&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;16일차-수업&quot;&gt;16일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;복습&quot;&gt;========복습========&lt;/h3&gt;

&lt;h3 id=&quot;변수--제어문--메소드--클래스&quot;&gt;변수 &amp;lt; 제어문 &amp;lt; 메소드 &amp;lt; 클래스&lt;/h3&gt;

&lt;h3 id=&quot;클래스&quot;&gt;클래스&lt;/h3&gt;

&lt;p&gt;필드(변수), 메소드를 통해 하나의 정의서를 작성하면 다른 클래스에서 호출하여 변수와 메소드를 사용할 수 있음&lt;/p&gt;

&lt;p&gt;호출하는 과정 : 인스턴스(new)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클래스명 인스턴스명 = new 클래스명();&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;new를 각 메소드 마다 사용을 하면 데이터가 꼬일 위험성이 있음&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 필드와 파라미터를 이용&lt;/p&gt;

&lt;p&gt;인스턴스 내 필드, 메소드를 사용하기 위해서는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스명.변수명&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스명.메소드명()&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메소드&quot;&gt;메소드&lt;/h3&gt;

&lt;p&gt;필요한 데이터를 전달 : 파라미터와 인자&lt;/p&gt;

&lt;p&gt;메소드 정의하는 법&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;반환 자료형 메소드(파라미터) {…}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;void : 기본형(반환하는 데이터의 자료형이 없을 때)&lt;/p&gt;

&lt;p&gt;반환 데이터가 있을 경우&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;데이터의 자료형을 입력(int String boolean double 등)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메소드 내에서 return 과 반환값을 입력&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터와 인자는 개수 제한이 없으나, 반환값은 1개&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클래스도 반환자료형이 가능&lt;/p&gt;

&lt;h3 id=&quot;파라미터&quot;&gt;파라미터&lt;/h3&gt;

&lt;p&gt;현재 메소드를 호출한 메소드로부터 데이터를 받아야할 때 정의하는 값&lt;/p&gt;

&lt;p&gt;메소드를 정의할 때 파라미터를 작성했다면 메소드를 호출할 때도 파라미터에 맞는 데이터를 무조건 작성해야함&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인자와 파라미터는 순서, 개수, 자료형이 일치해야함&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인스턴스&quot;&gt;인스턴스&lt;/h3&gt;

&lt;p&gt;클래스를 이용하여 인스턴스화(객체화)&lt;/p&gt;

&lt;p&gt;클래스에 정의된 내용을 가진 모양으로 메모리 상에 등록&lt;/p&gt;

&lt;h3 id=&quot;총-복습&quot;&gt;총 복습&lt;/h3&gt;

&lt;p&gt;프로그래밍을 할 때, 처음엔 모든 것을 main method에서 처리 했음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가독성도 떨어지고, 하나의 변수값을 변경하면 그에 해당 하는 모든 값이 변경되는 불편함 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서로 다른 변수끼리 영향 없이 유지되거나, 코드 재사용의 필요성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클래스를 이용해서 각각의 인스턴스를 생성함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필요한 경우에 따라서 해당 인스턴스만 수정, 변경 등이 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;수정, 변경을 하더라도 다른 인스턴스에 영향이 없게 프로그래밍&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각각의 프로그램을 부품화(객체지향 프로그래밍)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이전에는 문제가 나면 모든 소스코드가 오류&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스 이후 오류난 클래스 혹은 메소드만 수정!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but, 공통으로 사용하고 싶은 사례들이 생김&lt;/p&gt;

&lt;p&gt;static&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정적변수, 모든 클래스가 공통으로 사용하는 고정값&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스와 별개로 클래스에서 바로 사용가능 하도록 만드는 키워드&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필드와 메소드에 사용 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;static을 사용시 인스턴스를 생성하지 않아도 됨&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-끝-&quot;&gt;======== 끝 ========&lt;/h3&gt;

&lt;h2 id=&quot;16일차-수업-1&quot;&gt;16일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;package&quot;&gt;Package&lt;/h3&gt;

&lt;p&gt;자바에서 말하는 폴더 개념, 클래스와 인터페이스의 집합&lt;/p&gt;

&lt;p&gt;협업하면서 같은 클래스 이름이 충돌할 때, 패키지라는 계층구조로 문제를 해결할 수 있음&lt;/p&gt;

&lt;p&gt;패키지 안에는 패키지를 포함할 수 있고, dot(.)으로 구분한다&lt;/p&gt;

&lt;p&gt;패키지는 모든 자바파일의 첫 줄에 작성&lt;/p&gt;

&lt;p&gt;패키지의 경로가 전체 작성이 되어야함&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;day1206&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;import&quot;&gt;import&lt;/h3&gt;

&lt;p&gt;다른 패키지에 있는 클래스를 현재 클래스에서 사용하기 위한 기능&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;javalang&quot;&gt;Java.lang&lt;/h3&gt;

&lt;p&gt;자바에서는 우리가 자주 사용하는 것들을 좀 더 편하게 사용할 수 있도록 지원&lt;/p&gt;

&lt;p&gt;이 패키지 안에 있는 내용은 자료형, 자주사용하는 값들을 미리 다 생성&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//생략된 채로 import 되어있음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Spongebob53</name></author><category term="lecture" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 JAVA(자바), Python(파이썬) 기반의 AI 활용 응용 소프트웨어 개발자 양성 과정 2021.11.10. ~ 2022.05.18.</summary></entry><entry><title type="html">Java - Static / Constructor</title><link href="https://spongebob53.github.io/lecture-static_constructor" rel="alternate" type="text/html" title="Java - Static / Constructor" /><published>2021-12-01T18:00:00+09:00</published><updated>2021-12-01T18:00:00+09:00</updated><id>https://spongebob53.github.io/lecture-static_constructor</id><content type="html" xml:base="https://spongebob53.github.io/lecture-static_constructor">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;JAVA(자바), Python(파이썬) 기반의&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;AI 활용 응용 소프트웨어 개발자 양성 과정&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;2021.11.10. ~ 2022.05.18.&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  Lecture는 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-intro_var&quot;&gt;Intro/var&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-scanner&quot;&gt;Scanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop_practice&quot;&gt;Loop_practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-exam_prime&quot;&gt;Exam_prime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array1&quot;&gt;Array1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array2&quot;&gt;Array2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array3&quot;&gt;Array3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-class&quot;&gt;Class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-return&quot;&gt;Return&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-static_constructor&quot;&gt;Static/Constructor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-package&quot;&gt;Package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-overloading_string&quot;&gt;Overloading/String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./lecture-access_modifier_extends&quot;&gt;Access modifier/Extends&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;15일차-수업&quot;&gt;15일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;복습&quot;&gt;========복습========&lt;/h3&gt;

&lt;h3 id=&quot;메소드&quot;&gt;메소드&lt;/h3&gt;

&lt;p&gt;구조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;반환자료형 메소드명 (매개변수) { 코드블럭 }&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;반환자료형&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;우리가 알고 있는 자료형 모두 가능&lt;/li&gt;
          &lt;li&gt;void
            &lt;ul&gt;
              &lt;li&gt;반환자료형이 없다(return이 없거나, return; 가능)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-끝-&quot;&gt;======== 끝 ========&lt;/h3&gt;

&lt;h2 id=&quot;15일차-수업-1&quot;&gt;15일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;스코프&quot;&gt;스코프&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;변수의 범위, {중괄호} 기준으로 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;변수&quot;&gt;변수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;작성 위치에 따라 2가지로 나뉨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클래스가 기준 시점&lt;/p&gt;

&lt;p&gt;전역변수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클래스 밑에 바로 선언되는 변수(필드)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 { } 보다 먼저 선언, 모든 메소드에 영향을 미침&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;지역변수&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메소드 내부에 작성되어 해당 메소드에만 영향을 주는 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전역변수와 지역변수를 나누는 이유&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;코드의 반복성 o 변수의 재활용 )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전역변수와 지역변수는 중복이 가능하지만, 지역변수끼리는 중복이 불가능&lt;/p&gt;

&lt;p&gt;전역변수와 지역변수가 중복이 될 때, this로 전역변수 지목 가능&lt;/p&gt;

&lt;h3 id=&quot;static&quot;&gt;static&lt;/h3&gt;

&lt;p&gt;우리가 클래스를 사용하려면 인스턴스화 시켰어야했음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정적변수, 고정값, 프로그램이 시작될 때 즉시 생성되는 변수 또는 메소드&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;static 이용시 인스턴스화 과정 거치지않고 호출 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스에 상관없이 값을 클래스에서 바로 사용하고 싶을 때 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스에 따라서 값이 변하지 않아야 하는 경우
값의 변경사항을 모든 인스턴스가 공유해야할 때&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예시&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Isstatic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Isstatic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Isstatic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;constructor&quot;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;메소드 형태로 선언되며, 클래스 명이 메소드 명&lt;/p&gt;

&lt;p&gt;반환값 자체가 없는 메소드, void나 return을 작성하지 않음&lt;/p&gt;

&lt;p&gt;중복으로 작성가능, 인스턴스마다 초기값을 다르게 할 수 있음&lt;/p&gt;

&lt;p&gt;생성자는 생략이 가능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생략했을 때는 인자가 없는 모양으로 생략되어있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생략된 생성자가 아닌 다른 조건의 생성자를 만들면 기존 생략된 생성자는 더 이상 기능을 하지 않음&lt;/p&gt;

&lt;p&gt;예시&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;나비&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;회색&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Spongebob53</name></author><category term="lecture" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 JAVA(자바), Python(파이썬) 기반의 AI 활용 응용 소프트웨어 개발자 양성 과정 2021.11.10. ~ 2022.05.18.</summary></entry><entry><title type="html">W3schools - Constructor</title><link href="https://spongebob53.github.io/w3schools-constructor" rel="alternate" type="text/html" title="W3schools - Constructor" /><published>2021-12-01T18:00:00+09:00</published><updated>2021-12-01T18:00:00+09:00</updated><id>https://spongebob53.github.io/w3schools-constructor</id><content type="html" xml:base="https://spongebob53.github.io/w3schools-constructor">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;
  &lt;h3&gt;&lt;a href=&quot;https://www.w3schools.com/&quot;&gt;W3schools&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;div&gt;Lecture에서 배웠던 내용을 복습하며 작성했습니다&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  W3schools은 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-intro_setup&quot;&gt;Intro/Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-variable&quot;&gt;Variable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-datatype&quot;&gt;Data Type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-string_math&quot;&gt;String/Math&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-array&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-class_static&quot;&gt;Class/Static&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-constructor&quot;&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;constructors&quot;&gt;Constructors&lt;/h3&gt;

&lt;p&gt;Is a special method that is used to initialize objects.&lt;/p&gt;

&lt;p&gt;The constructor is called when an object of a class is called it can be used to set initial values for object attributes&lt;/p&gt;

&lt;p&gt;Constructor name must match the class name, and can’t have a return type&lt;/p&gt;

&lt;p&gt;All classes have constructors by default(if you do not create a class constructor yourself, java creates one for you, then, you are not able to set initial values for object attributes&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// output 5&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parametersconstructor&quot;&gt;Parameters(Constructor)&lt;/h3&gt;

&lt;p&gt;Can also take parameters, which is used to initialize attrubutes&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modelYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1969&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mustang&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modelYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//output 1969 Mustang&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Spongebob53</name></author><category term="w3schools" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 W3schools Lecture에서 배웠던 내용을 복습하며 작성했습니다</summary></entry><entry><title type="html">Java - Return</title><link href="https://spongebob53.github.io/lecture-return" rel="alternate" type="text/html" title="Java - Return" /><published>2021-11-30T18:00:00+09:00</published><updated>2021-11-30T18:00:00+09:00</updated><id>https://spongebob53.github.io/lecture-return</id><content type="html" xml:base="https://spongebob53.github.io/lecture-return">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;JAVA(자바), Python(파이썬) 기반의&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;AI 활용 응용 소프트웨어 개발자 양성 과정&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;2021.11.10. ~ 2022.05.18.&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  Lecture는 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-intro_var&quot;&gt;Intro/var&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-scanner&quot;&gt;Scanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop_practice&quot;&gt;Loop_practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-exam_prime&quot;&gt;Exam_prime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array1&quot;&gt;Array1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array2&quot;&gt;Array2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array3&quot;&gt;Array3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-class&quot;&gt;Class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-return&quot;&gt;Return&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-static_constructor&quot;&gt;Static/Constructor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-package&quot;&gt;Package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-overloading_string&quot;&gt;Overloading/String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./lecture-access_modifier_extends&quot;&gt;Access modifier/Extends&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;14일차-수업&quot;&gt;14일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;복습&quot;&gt;========복습========&lt;/h3&gt;

&lt;h3 id=&quot;예시&quot;&gt;예시&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yesterday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//클래스 정의: name Yesterday&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//필드 선언 : 선언만 한 필드, 대입을 하려면 메소드를 이용&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//선언과 대입(초기화) 동시에 가능&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//대입만 하려고 하면 오류&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//메소드 정의 : name test&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;//변수 선언, 제어문, 출력문 등&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;			        &lt;span class=&quot;c1&quot;&gt;//필드를 활용하여 데이터를 등록, 수정, 삭제 등등 하는 기능&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//매개변수를 이용하여 메소드에서 사용하고자하는 시작값을 정의&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//호출할 때 매개 변수의 순서, 자료형, 개수를 작성하여 값을 입력해줘야함&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//호출이 정확하게 이뤄지면 호출과 동시에 시스템에 등록(선언)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//시스템에 우리가 보이지 않게 실행&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//int i = 호출할 때 입력한 숫자&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//String s = 호출할 때 입력한 글자&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;클래스&quot;&gt;클래스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;(하고자 하는 약속) : 설계도, 정의서, 틀&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;필드(상태, 스펙 등등)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;클래스 내에서 저장하고 사용해야 하는 데이터, 변수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메소드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;필드의 데이터를 가지고 변경, 관리하는 기능, 데이터와 무관한 기능도 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인스턴스&quot;&gt;인스턴스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;클래스를 객체화(new)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정의서나 설계를 실제로 구현하는 것이 인스턴스&lt;/p&gt;

&lt;p&gt;시스템에서 사용하도록 등록한 것 : 클래스를 인스턴스화 했다&lt;/p&gt;

&lt;p&gt;동일한 클래스를 2번 new(인스턴스)를 하면 2개의 인스턴스가 생성됨&lt;/p&gt;

&lt;p&gt;이 2개의 인스턴스는 서로 다른 구현체(객체)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;호출&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Yesterday&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Yesterday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클래스 내에 있는 필드를 호출&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;클래스를 인스턴스화 한 변수명. 필드명&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;y.str&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;클래스에서 정의된 필드에 값을 대입(초기화)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;y.str = “hi”;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;클래스 내에 있는 메소드를 호출&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;클래스를 인스턴스화 한 변수명. 메소드명&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;y.test();&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메소드&quot;&gt;메소드&lt;/h3&gt;

&lt;p&gt;괄호안에 값이 있다 : 매개변수가 정의된 것임&lt;/p&gt;

&lt;p&gt;매개변수가 정의가 되어있다 : 인자(아규먼트)를 작성해야한다&lt;/p&gt;

&lt;p&gt;인자는 매개변수의 순서, 자료형, 개수 일치해야함&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testPram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;argument : 인자(전달인자), 메소드의 입력값&lt;/p&gt;

&lt;p&gt;parameter : 매개변수, 메소드에서 사용할 변수명&lt;/p&gt;

&lt;h3 id=&quot;-끝-&quot;&gt;======== 끝 ========&lt;/h3&gt;

&lt;h2 id=&quot;14일차-수업-1&quot;&gt;14일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;메소드-1&quot;&gt;메소드&lt;/h3&gt;

&lt;p&gt;클래스 내에 있는 필드의 데이터나 별도의 데이터를 수정하는 기능&lt;/p&gt;

&lt;p&gt;그러기 때문에 클래스 내에 존재해야함&lt;/p&gt;

&lt;p&gt;메소드 내 메소드는 불가능&lt;/p&gt;

&lt;p&gt;() : 파라미터 값이 선언되는 공간&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그 공간에는 해당 메소드를 호출할 때 사용할 변수를 미리 받을 수 있도록 정의하는 공간&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;외부입력 받은 값을 우리는 내부에서 작업을 해야함&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;외부입력 : 메소드 호출할 때 작성하는 인자&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내부 : 호출된 메소드 안&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메소드 호출 : 클래스명.메소드&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;같은 클래스 내의 메소드는 클래스명을 생략 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내부에서 작업을 한 결과를 다시 외부 전달해줘야 우리가 원하는 흐름이 완성됨&lt;/p&gt;

&lt;p&gt;외부 호출 &amp;gt; 내부처리 &amp;gt; 외부 결과 전달&lt;/p&gt;

&lt;p&gt;외부 호출 &amp;gt; 내부처리 &amp;gt; 내부에서 처리한 결과를 다른 메소드에서 호출&lt;/p&gt;

&lt;p&gt;다른 메소드에 필요한 값을 내부에서부터 받아야 함&lt;/p&gt;

&lt;h3 id=&quot;return&quot;&gt;return&lt;/h3&gt;

&lt;p&gt;메소드에서 결과를 우리가 원하는 공간에 데려올 수 있다!&lt;/p&gt;

&lt;p&gt;void&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;반환값이 없다 » 호출이 완료되고 나서 나는 너에게 줄게 없다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;return을 할 때 return 값에 대한 자료형 선언을 담당 : void&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;return이 있다 &amp;gt; void를 쓸 수 없다, 반환값이 있다, 반환값에 대한 자료형이 있다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;int String 등을 사용해서 리턴값에 대한 자료형을 void 대신에 선언,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예시&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메소드 호출이 되고 해당 줄까지 진행이 되고 난 후에&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;return 이라는 반환 키워드를 이용해서 호출을 한 메소드로 다음 값을 전달&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;return을 만나면 바로 반환을 시작 : 반환 대상은 result 라는 변수에 담긴 값&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;break처럼 return을 만나면 메소드가 바로 종료&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;return; =&amp;gt; 반환하는 값이 없다 &amp;gt; void 허용&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Spongebob53</name></author><category term="lecture" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 JAVA(자바), Python(파이썬) 기반의 AI 활용 응용 소프트웨어 개발자 양성 과정 2021.11.10. ~ 2022.05.18.</summary></entry><entry><title type="html">note - test</title><link href="https://spongebob53.github.io/note-test" rel="alternate" type="text/html" title="note - test" /><published>2021-11-27T22:40:00+09:00</published><updated>2021-11-27T22:40:00+09:00</updated><id>https://spongebob53.github.io/note-test</id><content type="html" xml:base="https://spongebob53.github.io/note-test">&lt;p&gt;이곳은 노트입니다!!!&lt;/p&gt;</content><author><name>Spongebob53</name></author><category term="note" /><summary type="html">이곳은 노트입니다!!!</summary></entry><entry><title type="html">Java - Class</title><link href="https://spongebob53.github.io/lecture-class" rel="alternate" type="text/html" title="Java - Class" /><published>2021-11-26T18:00:00+09:00</published><updated>2021-11-26T18:00:00+09:00</updated><id>https://spongebob53.github.io/lecture-class</id><content type="html" xml:base="https://spongebob53.github.io/lecture-class">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;JAVA(자바), Python(파이썬) 기반의&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;&lt;h3&gt;AI 활용 응용 소프트웨어 개발자 양성 과정&lt;/h3&gt;&lt;/div&gt;

&lt;div&gt;2021.11.10. ~ 2022.05.18.&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  Lecture는 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-intro_var&quot;&gt;Intro/var&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-scanner&quot;&gt;Scanner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-loop_practice&quot;&gt;Loop_practice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-exam_prime&quot;&gt;Exam_prime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array1&quot;&gt;Array1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array2&quot;&gt;Array2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-array3&quot;&gt;Array3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-class&quot;&gt;Class&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-return&quot;&gt;Return&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-static_constructor&quot;&gt;Static/Constructor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-package&quot;&gt;Package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./lecture-overloading_string&quot;&gt;Overloading/String&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;./lecture-access_modifier_extends&quot;&gt;Access modifier/Extends&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;13일차-수업&quot;&gt;13일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;복습&quot;&gt;========복습========&lt;/h3&gt;

&lt;h3 id=&quot;객체지향&quot;&gt;객체지향&lt;/h3&gt;

&lt;p&gt;if문이랑 for문 정도면 충분히 프로그램의 가독성이나 반복성이 좋았음&lt;/p&gt;

&lt;p&gt;프로그램이 거대해지고 흐름이 복잡해지니까 객체지향으로 프로그래밍&lt;/p&gt;

&lt;p&gt;객체지향의 시작점이 메소드&lt;/p&gt;

&lt;h3 id=&quot;메소드--진행이-되는-가장-작은-단위&quot;&gt;메소드 : 진행이 되는 가장 작은 단위&lt;/h3&gt;

&lt;p&gt;메소드 안의 내용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;변수 선언, if for 등 제어문, 출력문 등등&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그동안은 main 메소드라는 메소드에서 작업을 했던 것&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메소드 선언하기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;접근제어자 static 반환타입 메소드이름 (파라미터) { 실행문 }&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(생략가능) (*특이) ( 생 략 불 가 능 ) (생략가능)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;메소드&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;실행부&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;코드&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;작성부분&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;메소드 선언과 동시에 파라미터 변수 생성(선언)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minus2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메소드 호출&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;메소드의 호출은 다른 메소드에서 진행(*특이case: 자기 자신도 포함)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메소드들 중에서 항상 가장먼저 시작되는 main 메소드로부터 일단 호출이 시작&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메소드 호출하지 않았다 : if 문에서 거짓 문장에 있는 사용하지 않는 문장 같음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인자&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;메소드 이름(인자);&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;호출 하는 메소드(main)에서 호출된 메소드(minus)로 전달하는 값&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;인자 : 메소드 정의할 때 매개변수가 있다면 필수 작성&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터(매개변수)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;호출이 돼서 메소드가 시작될 때 그 안에서 사용할 값&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;바로 사용을 해야하기 때문에 자료형과 변수명을 미리 작성&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인자와 파라미터는 서로 연결된 사이&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파라미터와 인자는 개수, 자료형, 순서 가 동일해야한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-끝-&quot;&gt;======== 끝 ========&lt;/h3&gt;

&lt;h2 id=&quot;13일차-수업-1&quot;&gt;13일차 수업&lt;/h2&gt;

&lt;h3 id=&quot;클래스&quot;&gt;클래스&lt;/h3&gt;

&lt;p&gt;java 코드를 구성하는 큰 틀 .java 파일에 작성된 하나의 설계도&lt;/p&gt;

&lt;p&gt;“객체”를 정의하는 틀(필드와 메소드를 정의)&lt;/p&gt;

&lt;p&gt;클래스명 규칙 : 첫글자 대문자로 작성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;필드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;지역변수보다 넓은 사용범위의 변수, 해당 클래스 내의 메소드들에서 사용가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;메소드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;클래스의 기능 정의&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예시&lt;/p&gt;

    &lt;p&gt;과자틀 : 클래스&lt;/p&gt;

    &lt;p&gt;과자틀로 인해서 나오는 과자 : 객체&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;this : 클래스에 의해서 새로 만들어진 객체를 뜻함&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;클래스 : 객체를 만들기 위한 하나의 설계도, 단위(*new)&lt;/p&gt;

    &lt;p&gt;클래스 필드 : 객체의 상태를 표현한다 : 포함된 변수 의미&lt;/p&gt;

    &lt;p&gt;클래스 메소드 : 객체의 행동을 표현한다 : 포함된 메소드 의미&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인스턴스&quot;&gt;인스턴스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;프로그램에 new가 많다는건 인스턴스가 많다는 뜻, 컴퓨터의 부하가 오기 쉬움&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;참조변수를 매개변수로 메소드에 보낼 수도 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Calc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Calc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 인스턴스를 두 개의 변수가 공유하는 상황,&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;참조변수에는 인스턴스에 대한 주소값이 저장됨, 결국 같은 인스턴스인 상황&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예시&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;클래스 생성
“Calc.java” 파일 생성 - 단독 실행 목적이 아닐 경우 main 메소드 필요없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;필드&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;인스턴스&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;선언&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;메소드&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;기능에&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;대한&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;부분&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;인스턴스 생성
    &lt;ul&gt;
      &lt;li&gt;다른 클래스 혹은 파일에서&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Calc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;인스턴스&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;생성&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;참조변수&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;선언&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;참조변수&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;통해&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;메소드&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;호출&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Calc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;새로운&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;인스턴스&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;생성&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;				&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1과&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2는&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;영향을&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;받지&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;않음&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Spongebob53</name></author><category term="lecture" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 JAVA(자바), Python(파이썬) 기반의 AI 활용 응용 소프트웨어 개발자 양성 과정 2021.11.10. ~ 2022.05.18.</summary></entry><entry><title type="html">W3schools - Class/Static</title><link href="https://spongebob53.github.io/w3schools-class_static" rel="alternate" type="text/html" title="W3schools - Class/Static" /><published>2021-11-26T18:00:00+09:00</published><updated>2021-11-26T18:00:00+09:00</updated><id>https://spongebob53.github.io/w3schools-class_static</id><content type="html" xml:base="https://spongebob53.github.io/w3schools-class_static">&lt;div&gt;이 페이지는 다음에 대한 공부 기록입니다&lt;/div&gt;

&lt;div&gt;
  &lt;h3&gt;&lt;a href=&quot;https://www.w3schools.com/&quot;&gt;W3schools&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;

&lt;div&gt;Lecture에서 배웠던 내용을 복습하며 작성했습니다&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;
  W3schools은 여러 파트로 구성되어 있습니다.
&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-intro_setup&quot;&gt;Intro/Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-variable&quot;&gt;Variable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-datatype&quot;&gt;Data Type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-operator&quot;&gt;Operator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-string_math&quot;&gt;String/Math&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-conditional&quot;&gt;Conditional&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-loop&quot;&gt;Loop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-array&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-method&quot;&gt;Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-class_static&quot;&gt;Class/Static&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./w3schools-constructor&quot;&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oopobject-oriented-programming&quot;&gt;OOP(Object Oriented Programming)&lt;/h3&gt;

&lt;p&gt;Java is OOP language&lt;/p&gt;

&lt;p&gt;Procedual programming is about writing procedures or methods that perform operations on the data, while OOP is about creating objects that contain both data and methods&lt;/p&gt;

&lt;p&gt;OOP has advantages over procedual programming&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Faster and easier to execute&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provides a clear structure&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Helps to keep “DRY” and makes the code easier to maintain, modify and debug&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Makes it possible to create full reusable app with less code and short development time&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;class-and-object&quot;&gt;Class and Object&lt;/h3&gt;

&lt;p&gt;Two main aspects of OOP&lt;/p&gt;

&lt;p&gt;Class is a template for object(is like object constructor)&lt;/p&gt;

&lt;p&gt;Object is an instance of a class&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;individual objects are created, they inherit all the variables and methods from the class&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Class&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Object&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Attribute&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Method&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;blueprint&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;volvo&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;weight, color&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;drive,brake&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;create-class&quot;&gt;Create Class&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// create a class named “Main”&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;				&lt;span class=&quot;c1&quot;&gt;// field, class attribute&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myObj1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//(specify the class name)(object name) = create instance, using keyword “new”&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myObj2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// can also create more instance&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// can access attributes by using the dot&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// can modify attribute value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// can also override existing value&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myObj1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// output 10,&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myObj2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// output 20 they are different instance&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;static&quot;&gt;Static&lt;/h3&gt;

&lt;p&gt;which means that it cans be accessed without creating an object of the class, unlike public&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blahblah&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myStaticmethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// Call the static method&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Create an object of Main&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myPublicMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Call the public method on the object&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Spongebob53</name></author><category term="w3schools" /><summary type="html">이 페이지는 다음에 대한 공부 기록입니다 W3schools Lecture에서 배웠던 내용을 복습하며 작성했습니다</summary></entry></feed>